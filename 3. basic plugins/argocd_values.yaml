controller:
  replicas: 1
  args:
    statusProcessors: "20"
    operationProcessors: "10"
    appResyncPeriod: "180"
    selfHealTimeout: "5"
    repoServerTimeoutSeconds: "60"
  podAnnotations: {}
  podLabels: {}
  volumeMounts: []
  volumes: []
  nodeSelector: { role: nodegroup_admin }
  tolerations:
    - key: "TAINED_BY_ADMIN"
      operator: "Exists"
      effect: "NoSchedule"
dex:
  env: []
  envFrom: []
  podAnnotations: {}
  podLabels: {}
  nodeSelector: { role: nodegroup_admin }
  tolerations:
    - key: "TAINED_BY_ADMIN"
      operator: "Exists"
      effect: "NoSchedule"
redis:
  podAnnotations: {}
  podLabels: {}
  nodeSelector: { role: nodegroup_admin }
  tolerations:
    - key: "TAINED_BY_ADMIN"
      operator: "Exists"
      effect: "NoSchedule"
server:
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  podAnnotations: {}
  podLabels: {}
  containerPort: 8080
  nodeSelector: { role: nodegroup_admin }
  tolerations:
    - key: "TAINED_BY_ADMIN"
      operator: "Exists"
      effect: "NoSchedule"
  affinity: {}
  certificate:
    enabled: false
    domain: argocd.example.com
    issuer:
      kind:
      name:
    additionalHosts: []
    secretName: argocd-server-tls
  ingressGrpc:
    enabled: false
    isAWSALB: false
    annotations: {}
    labels: {}
    ingressClassName: ""
    awsALB:
      serviceType: NodePort
      backendProtocolVersion: HTTP2
    hosts: []
    paths:
      - /
    pathType: Prefix
    extraPaths: []
    tls: []
    https: false
  configEnabled: true
  config:
    url: https://argocd.example.com
    application.instanceLabelKey: argocd.argoproj.io/instance

repoServer:
  replicas: 1
  podAnnotations: {}
  podLabels: {}
  nodeSelector: { role: nodegroup_admin }
  tolerations:
    - key: "TAINED_BY_ADMIN"
      operator: "Exists"
      effect: "NoSchedule"
  affinity: {}
  service:
    annotations: {}
    labels: {}
    port: 8081
    portName: https-repo-server
configs:
  clusterCredentials: []
  gpgKeysAnnotations: {}
  gpgKeys: {}
  knownHostsAnnotations: {}
  secret:
    createSecret: true
    annotations: {}
    githubSecret: ""
    gitlabSecret: ""
    gogsSecret: ""
    extra: {}
    argocdServerTlsConfig: {}
    argocdServerAdminPassword: ""
    argocdServerAdminPasswordMtime: ""
  styles: ""
openshift:
  enabled: false
